# Custom Snippets for Pandoc
# 	Personal snippets defined to extend Pandoc
#
# Author: Cooper Wallace

################################################################################

# Include pre-defined snippets in vim-snippets
extends markdown
extends tex
extends texmath

# overwrite if necessary
priority -49

################################################################################
# Global Snippets

global !p

# Define a Python script to create a matrix in Math Mode
# source
# https://vi.stackexchange.com/questions/17439/easiest-way-to-insert-latex-matrix/17443
def create_matrix(snip):

        matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

        rows = int_val(rows)
        cols = int_val(cols)

        offset = cols + 1
        old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "\\begin{"+matrix_str+"}\n"

        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

                final_str += " \\\\\\\n"

        final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

        snip.expand_anon(final_str)

# Define a Python script to create a matrix in Math Mode
# source
# https://vi.stackexchange.com/questions/17439/easiest-way-to-insert-latex-matrix/17443
def create_aug_matrix(snip):

        matrix_str = (snip.buffer[snip.line].split('augmat')[0]+'matrix').strip()

        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

        rows = int_val(rows)
        cols = int_val(cols)

        offset = cols + 1
        old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "\\begin{"+matrix_str+"}[" + (cols-1)*'c'+"|c]\n"

        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

                final_str += " \\\\\\\n"

        final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

        snip.expand_anon(final_str)

endglobal

pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet

pre_expand "create_aug_matrix(snip)"
snippet "(small|[bBpvV])?augmat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet

################################################################################
# MISC Snippets

snippet graph "Graph the function specified"
\begin{tikzpicture}[xscale=.5,yscale=.5]
\begin{axis}[
	ymin=-10, ymax=10,
	xmin=-10, xmax=10,
	axis lines = left, grid=both,
	axis x line=middle,	axis y line=middle,
	domain=-10:10
	]
\addplot [samples=100, color=red, thick]
{${1:Equation}};
\end{axis}
\end{tikzpicture}
endsnippet

################################################################################
# LaTeX Environments

snippet ali "Aligned"
\begin{align*}
	${1:1}
\end{align*}
endsnippet

snippet fli "Aligned Float Left"
\begin{flalign*}
	${1:1} &&
\end{flalign*}
endsnippet

snippet begin "Latex begin environment"
\begin{${1:name}}
	${2:${VISUAL}}
\end{$1}
endsnippet

snippet header "Document heaer"
---
header-title: `!v vim_snippets#Filename('$1', 'title')`
header-author: Cooper Wallace
header-date: `!v strftime("%b %-e %Y")`
---

$0
endsnippet

snippet text "Equation text"
\text{${1:Text}}
endsnippet

snippet eqn "Gather Environment"
\begin{gather*}
$1
\end{gather*}
$0
endsnippet

snippet ex "Example"
\begin{example}
$1
\end{example}
$0
endsnippet

snippet arr "begin array environment"
\begin{array}{${1:l}}
	${2:${VISUAL}}
\end{array}
endsnippet


################################################################################
# Document Text Formatting Snippets

snippet ul "Underline"
\underline{${1:Text}}
endsnippet

snippet bl "Bold line"
**${1:Text}**
endsnippet

snippet bul "Bolder underlined"
**\underline{${1:Text}}**
endsnippet

snippet aside "Aside Text"
\begin{boxtext}
	${1:}
\end{boxtext}
endsnippet

snippet ccbl "Inline Code Block" iA
\`$1\`$0
endsnippet

################################################################################
# LaTeX Math Snippets

context "isMath()"
snippet frac "Fraction" i
\frac{${1:1}}{${2:2}}
endsnippet

snippet stirl "Stirling Number of the 2nd King" iA
\stirling{$1}{$2}
endsnippet


# Taken from the great
# https://gist.github.com/gillescastel/8da990dbc83c1c86f8ca048bc83624f0
priority 10
context "isMath()"
snippet '(\d+)/' "number frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "isMath()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet lim "Limits" i
\lim_{x\to ${1:}}
endsnippet

snippet hlim "First principle derivative" i
f'(a) = \lim_{h\to 0} \frac{f(x+h) -f(x)}{h}
endsnippet

snippet dydx "Delta y over Delta x" i
\frac{\delta y}{\delta x}
endsnippet

snippet sum "Sum Equation" i
\sum_{i=${1:1}}^${2:n}
endsnippet

context "isMath()"
snippet cases "Peacewise Cases" i
\begin{cases}
	1 & n= 0
\end{cases}
endsnippet

context "isMath()"
snippet ce "Chemical Equations" i
\ce{^${1}_${2} ${3}}
endsnippet

# Subscripts

snippet /\_\_/ "Subscript" riA
_{$1}$0
endsnippet

context "isMath()"
snippet /\^\^/ "Superscript" riA
^{$1}$0
endsnippet

context "isMath()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

priority 100
context "isMath()"
snippet p// "Partial Fraction" iA
\\frac{\partial $1}{\partial $2}$0
endsnippet

snippet mm "Math" wA
$${1:${VISUAL}}$`!p
punctuation = t[2] and t[2][0] in [',', '.', '?', '-']
if punctuation:
	if len(t[2]) == 1:
		t[2] = t[2] + (' ' if t[2][0] in [',', '.', '?'] else '')
	snip.rv=''
else:
	snip.rv=' '
`$2
endsnippet

# Allows for the following: <symbol> dot -> \dot{symbol}
# Useful when recording lecture verbatim "Theta dot"
context "isMath()"
snippet '(\\?\w+) (d{1,3})ot' "Dot notation" irA
\\`!p snip.rv = match.group(2) +  "ot{" + match.group(1) + "}"`
endsnippet

################################################################################
# Mathematical Symbol Macros

snippet >= "Greater than equal" iA
\geq $0
endsnippet

snippet <= "Less than equal" iA
\leq $0
endsnippet

snippet != "Not equal" iA
\neq $0
endsnippet

snippet ~= "Approximate" iA
\approx $0
endsnippet

context "isMath()"
snippet !~ "Not Approximate" iA
\not \approx $0
endsnippet

snippet sqrt "Square root" iA
\sqrt{${1:1}}
endsnippet

snippet vec "Vector Hat" i
\vec{$1}$0
endsnippet

# Set Theory
snippet notin "not in" iA
\not\in $0
endsnippet

snippet UU "cup" iA
\cup $0
endsnippet

snippet NN "cap" iA
\cap $0
endsnippet

snippet binom "Binomial environment" i
\binom{$1}{$2}$0
endsnippet

snippet "(\\?)hat" "Approximation hat" ir
\hat{$1}$0
endsnippet

snippet lagrangian "Lagrangian"
\frac{\partial L}{\partial $1} - \frac{d}{dt} (\frac{\partial L}{\partial
\dot{$1}})=0
endsnippet

snippet ddt "Integral of t" iA
\frac{d}{dt} $0
endsnippet

snippet abs "Absolute Value" iA
\abs{$1} $0
endsnippet

snippet lra "Left right angle" iA
\langle $1 \rangle $0
endsnippet



################################################################################
# Templates
## Inspiration from Lervag dotvim

snippet incimg "Include a Graphical image" i
\begin{center}
	\includegraphics[width=0.5\textwidth]{./figures/${1}}
\end{center}
$0
endsnippet

snippet incfig "Include pdf_tex image" i
\begin{center}
	\scalebox{$1}{\import{./figures/}{$2.pdf_tex}}
\end{center}
endsnippet

snippet wrapfig "Wrap Figue" i
\begin{wrapfigure}{${1:r}}{0.5\textwidth}
	$2
\end{wrapfigure}
$0
endsnippet

# Notemgr specific command!
snippet scrot "Take a screenshot and include" i
\includegraphics[width=0.5}\textwidth]{./figures/`notemgr-scrot`}
$0
endsnippet

